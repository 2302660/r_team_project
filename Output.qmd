``` {r}
library(tidyverse)
library(plotly)
library(shiny)
library(scales)
```

``` {r}
# Load data
data <- read_csv("dataset/cleaned_breaches.csv")

```

``` {r}

#remove commas
data$`records_lost` <- gsub(",", "", data$`records_lost`)
data$`records_lost` <- gsub(";", "", data$`records_lost`)

# convert chr to numeric
data$`records_lost` <- as.integer(data$`records_lost`)

# mutate match month.abb with data$month into a new column
data <- data %>% mutate(month.abb = match(data$month, month.abb))
data <- data %>% mutate(records_lost_m = `records_lost` / 1000000)
data <- data %>% mutate(records_lost_k = `records_lost` / 1000)

head(data)

data_2024 <- data %>% filter(year == 2024)

head(data_2024)

```

``` {r}

head(data_2024)

data_2024 <- data_2024 %>% 
  mutate(name = fct_reorder(organisation, records_lost_m)) # to order the data in the graph

  ggplot(data_2024, aes(x=name, y=records_lost_m)) +
      geom_segment( aes(x=name, xend=organisation, y=0, yend=records_lost_m)) +
      geom_point(size=4, alpha=0.6, color= "orange") +
      scale_y_log10(labels = label_number()) +
      coord_flip() +
      theme_gray() +
      xlab("")

```

``` {r}

# Display ranking and statistics on info. Enable filtering functionality. 

# order data function data_2024 <- data_2024 %>% 
# mutate(name = fct_reorder(organisation, records_lost_m)) # to order the data in the graph

# add data ranking, if more 2 same organisation in the same year, then add together.

# SHINY APP
sectorFilter <- c(unique(data$sector),"All")

ui <- fluidPage(
  theme = bslib::bs_theme(bootswatch = "flatly"),
  titlePanel(
    "Data Breaches in History"
  ),
  sidebarLayout(
    sidebarPanel(
      # inputs
      selectInput("Year", "Filter by Year", choices = unique(data$year), selected = 2024),
      sliderInput("val_top", "Show the top n Records:", min = 1, max = 30, value = 10, step = 1),
      
      # Data information when you hover etc.
      verbatimTextOutput("info"),
    ),
    mainPanel(
      plotOutput("plot", width = "900px", height = "600px", click= "plot_click"),
      verbatimTextOutput("summary"),
    )
  )
)

server <- function(input, output, session) {
  output$plot <- renderPlot({
    
    data_plot <- data %>% filter(year == input$Year) %>%
      mutate(name = fct_reorder(organisation, records_lost_m)) %>%
      mutate(Rank = rank(-records_lost_m, ties.method = "average")) %>%
      arrange(Rank) %>%
      head(input$val_top)
    
     ggplot(data_plot, aes(x=name, y=records_lost_m)) +
      geom_segment( aes(x=name, xend=organisation, y=0, yend=records_lost_m)) +
      geom_point(size=4, alpha=0.6, color="orange") +
      scale_y_log10(labels = label_number()) +
      coord_flip() +
      theme_gray() +
      xlab("")
  }, res = 96)
  
  output$info <- renderText({
    ranked_data <- data %>% filter(year == input$Year) %>% 
      mutate(name = fct_reorder(organisation, records_lost_m)) %>%
      mutate(Rank = rank(-records_lost_m, ties.method = "average")) %>% 
      # sort by rank
      arrange(Rank) %>%
      # get ranks 1-10
      head(input$val_top)
    
    # Create a text representation of the top 10
    top_10_text <- ranked_data %>%
      mutate(Info = paste(Rank, ": ", name, " - Records Lost (M): ", records_lost_m)) %>%
      pull(Info) %>%
      paste(collapse = "\n")
    
    # Combine with the default value
    paste0(
      "Year: 2024", "\n",
      "Total Records Lost (M): ", sum(ranked_data$records_lost_m), "\n\n",
      "Top 10 Rankings:\n", top_10_text
    )
  })
  
}

shinyApp(ui, server)



```