---
title: "Interactive Plot"

format: 
  html: 
    embed-resources: true
    page-layout: full
    toc: true
    toc-depth: 2
    runtime: shiny
    theme: cosmo
    
knitr:
  opts_chunk:
    message: false
    warning: false
---

::: {.lead .subtitle}
**Visualizing World's Biggest Data Breaches and Hacks Over Time**
:::

::: {#authors_container}
::: {#author-title}
Authors
:::

1.  Heng Yu Xin 

2.  Javier Si Zhao Hong 

3.  Tan Guan Hong 

4.  Hong Ziyang 

5.  Abdul Haliq Bin Abdul Rahim 

6.  See Toh Ming Xuan Axel 
:::

# Introduction

Data breaches and hacks have become increasingly common in today's digital world. These incidents can have serious consequences for individuals, organizations, and society as a whole. In this document, we will create an interactive bubble plot using Shiny and Plotly to visualize trends in data breaches and hacks over time. The plot will allow users to explore the dataset by selecting specific years and sectors. Additionally, users can click on a point in the plot to view more details about the data breach or hack. This interactive plot will provide a user-friendly way to analyze and explore the dataset.

# Load Libraries

The following libraries are required for this document:


```{r}
library(shiny)
library(shinythemes)
library(plotly)
library(tidyverse)
library(scales)
library(knitr)
```


# Read Data

The dataset used in this document is available has been cleaned and transformed during the proposal staged. It is available in the `dataset` folder. The dataset contains information about data breaches and hacks that have occurred over the years.


```{r}
# Read data
data <- read.csv("dataset/cleaned_breaches.csv")
```


# Further Data Cleaning and Transformation

The `records_lost` column in the dataset is in scientific notation. We will convert this column to millions and round to 2 decimal places. We will also format the numbers to avoid scientific notation.

```{r}
# Convert 'records_lost' to millions and round to 2 decimal places
data <- data %>%
  mutate(records_lost = round(records_lost / 1e6, 2))

# Format numbers to avoid scientific notation and append 'M' suffix
data <- data %>%
  mutate(records_lost = format(records_lost, scientific = FALSE))

# Ensure records_lost is numeric
data$records_lost <- as.numeric(data$records_lost)

# Display the first few rows of the data
kable(head(data), caption = "First few rows of the data")
```


# Create Interactive Plot

We will create an interactive bubble plot that shows trends in data breaches and hacks over time. 

## Creating the UI with Shiny.

In the UI, we will create a sidebar layout with input controls for selecting the year and sector. We will also include a radio button to select the scale type (linear or logarithmic) for the y-axis. The main panel will display the interactive bubble plot and a display area for more details when a point is clicked.


```{r}

# Define UI
ui <- fluidPage(
  theme = shinytheme("superhero"),
  tags$style(HTML("
        .control-label {
            font-size: 18px;
        }
    ")),
  titlePanel("Data Breaches & Hacks Analysis"),
  
  sidebarLayout(
    sidebarPanel(
      selectInput(
        "year",
        "Year",
        choices = sort(unique(data$year), decreasing = TRUE),
        selected = c(2020, 2021, 2022, 2023, 2024),
        multiple = TRUE
      ),
      selectInput(
        "sector",
        "Sector",
        choices = unique(data$sector),
        selected = c("government", "finance"),
        multiple = TRUE
      ),
      
      radioButtons(
        "scale_type",
        "Scale Type",
        choices = list("Linear" = "linear", "Logarithmic" = "log"),
        selected = "log"
      )
     
    ),
    mainPanel(
      plotlyOutput("bubblePlot", height = "450px"),
      HTML("<h3 style='color: orange;'><b>More Details:</b></h3>"),
      # Title for the display area
      htmlOutput("detailPanel")  # Output area for clicked point details
    )
  )
)

```


## Creating the Server Logic

In the server logic, we will define a reactive function to filter the data based on the selected year and sector. We will then generate the bubble plot using ggplot2 and render it using plotly. We will also capture and display the details of a clicked point in the plot.


```{r}

# Define server logic
server <- function(input, output, session) {
  # Reactive function to filter data based on selections
  filteredData <- reactive({
    req(input$year, input$sector)
    data %>%
      filter(year %in% input$year, sector %in% input$sector) %>%
      mutate(id = row_number())  # Add a unique identifier for each row
  })
  
  # Generate plot output
  output$bubblePlot <- renderPlotly({
    p <- ggplot(
      filteredData(),
      aes(
        year,
        records_lost,
        fill = breach_method,
        size = data_sensitivity,
        customdata = id
      )
    ) +
      geom_point(aes(
        text = paste(
          "<br><b>Year:</b> ",
          year,
          "<br><b>Organisation:</b> ",
          organisation,
          "<br><b>Records Lost (in Millions):</b>",
          records_lost,
          "<br><b>Breach Method:</b> ",
          breach_method,
          "<br><b>Data Sensitivity:</b> ",
          data_sensitivity
        )
      ), alpha = 0.5, na.rm = TRUE) +
      scale_x_continuous(breaks = seq(min(data$year), max(data$year), by = 1)) +
      labs(title = "Trends in Data Breaches & Hacks Over Time", x = "Year", y = "Records Lost (in Millions)") +
      guides(fill = guide_legend(title = "Breach Method")) +
      guides(size = guide_legend(title = "")) +
      theme_gray() +
      theme(
        plot.title = element_text(
          size = 20,
          face = "bold",
          family = "Arial"
        ),
        # Title size & font
        axis.title.x = element_text(size = 14, margin = margin(15, 0, 15, 0)),
        # X-axis title size and margin
        axis.title.y = element_text(size = 14, margin = margin(0, 15, 0, 15)),
        # Y-axis title size and margin,
        axis.text.x = element_text(size = 10),
        # X-axis text size
        axis.text.y = element_text(size = 10),
        # Y-axis text size
        legend.title = element_text(face = "bold", size = 12),
        # Adjust the size of the legend title
        legend.text = element_text(size = 10),
        # Adjust the size of the legend text
        legend.key.size = unit(10, "cm"),
        # Adjust the size of the legend keys
        legend.background = element_rect(fill = "white", colour = "darkblue"),
        legend.box.margin = margin(10, 10, 10, 10)  # Adjust the margin around the legend
      )
    
    if (input$scale_type == "log") {
      p <- p + scale_y_log10(labels = scales::comma)
    } else {
      p <- p + scale_y_continuous(labels = scales::comma)
    }
    
    ggplotly(p, tooltip = "text") %>%
      layout(hoverlabel = list(align = "left"))
  })
  
  # Capture and display click information
  observeEvent(event_data("plotly_click"), {
    click_data <- event_data("plotly_click")
    if (is.null(click_data)) {
      output$detailPanel <- renderUI("Click on a point to see details.")
    } else {
      # Extract the custom data (unique ID) from the click event
      clicked_id <- click_data$customdata
      
      df <- filteredData()
      
      # Find the row corresponding to the clicked ID
      selected_point <- df %>% filter(id == clicked_id)
      
      if (nrow(selected_point) == 1) {
        output$detailPanel <- renderUI({
          HTML(
            paste0(
              "<div style='border: 3px solid #ccc; padding: 10px; border-radius: 10px; width: 850px; font-size: 16px;'>",
              "<b>Year:</b> &nbsp;&nbsp;",
              selected_point$year,
              "&nbsp;&nbsp;&nbsp;&nbsp; <b>Month:</b> &nbsp;&nbsp;",
              selected_point$month,
              "<br>",
              "<b>Organisation:</b> &nbsp;&nbsp;",
              selected_point$organisation,
              "<br>",
              "<b>Sector:</b> &nbsp;&nbsp;",
              selected_point$sector,
              "<br>",
              "<b>Records Lost (in Millions):</b> &nbsp;&nbsp;",
              selected_point$records_lost,
              "<br>",
              "<b>Breach Method:</b> &nbsp;&nbsp;",
              selected_point$breach_method,
              "<br>",
              "<b>Data Sensitivity:</b> &nbsp;&nbsp;",
              selected_point$data_sensitivity,
              "<br>",
              "<b>Story:</b> &nbsp;&nbsp;",
              selected_point$story,
              "<br>",
              "<b>Source:</b> &nbsp;&nbsp; <a href='",
              selected_point$source_link,
              "' target='_blank'>Link</a>",
              "</div>"
            )
          )
        })
      } else {
        output$detailPanel <- renderUI("Selected point not found in the filtered data.")
      }
    }
  })
}
```


# Run the Application

Finally, we will run the application using the `runApp()` function.

```{r}
# Run the application
runApp(list(ui = ui, server = server), launch.browser = TRUE)
```


# Conclusion

In this document, we created an interactive bubble plot using Shiny and Plotly to visualize trends in data breaches and hacks over time. The plot allows users to select specific years and sectors to explore the data. Additionally, users can click on a point in the plot to view more details about the data breach or hack. This interactive plot provides a user-friendly way to analyse and explore the dataset.
