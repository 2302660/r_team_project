``` {r}
library(tidyverse)
library(shiny)
library(scales)
```

``` {r}
# Load data
data <- read_csv("dataset/cleaned_breaches.csv")

```

``` {r}

#remove commas
data$`records_lost` <- gsub(",", "", data$`records_lost`)
data$`records_lost` <- gsub(";", "", data$`records_lost`)

# convert chr to numeric
data$`records_lost` <- as.integer(data$`records_lost`)

# mutate match month.abb with data$month into a new column
data <- data %>% mutate(month.abb = match(data$month, month.abb))
data <- data %>% mutate(records_lost_m = `records_lost` / 1000000)
data <- data %>% mutate(records_lost_k = `records_lost` / 1000)

# identify duplicates and append the year to duplicates
data <- data %>%
  group_by(organisation) %>%
  mutate(dup = n() > 1,
         unique_org_year = ifelse(dup, paste(organisation, year, sep = "_"), organisation)) %>%
  ungroup()

head(data)

data_2024 <- data %>% filter(year == 2024)

head(data_2024)

```

``` {r}

head(data_2024)

data_2024 <- data_2024 %>%
  mutate(name = fct_reorder(organisation, records_lost_m)) # to order the data in the graph

ggplot(data_2024, aes(x = name, y = records_lost_m)) +
  geom_segment(aes(
    x = name,
    xend = organisation,
    y = 0,
    yend = records_lost_m
  )) +
  geom_point(size = 4,
             alpha = 0.6,
             color = "orange") +
  scale_y_log10(labels = label_number()) +
  coord_flip() +
  theme_gray()

```

``` {r}

# SHINY APP
sectorFilter <- c(unique(data$sector), "All")

ui <- fluidPage(
  theme = bslib::bs_theme(bootswatch = "flatly"),
  titlePanel("Data Breaches in History"),
  sidebarLayout(
    sidebarPanel(
      # inputs
      selectInput(
        "Years",
        "Filter by Years",
        choices = sort(unique(data$year), decreasing = TRUE),
        selected = c(2024),
        multiple = TRUE
      ),
      sliderInput(
        "val_top",
        "Show the top n Records:",
        min = 1,
        max = 30,
        value = 10,
        step = 1
      ),
      # Data information when you hover etc.
      verbatimTextOutput("info")
    ),
    mainPanel(
      plotOutput(
        "plot",
        width = "900px",
        height = "600px"
      ),
      verbatimTextOutput("summary")
    )
  )
)

# server function 
server <- function(input, output, session) {
  
  # Reactive expression to calculate max records for current selected years
  max_records <- reactive({
    data %>% filter(year %in% input$Years) %>% nrow()
  })
  
  # Observes changes in selected years and update the sliderInput
  observe({
    max_recs <- max(1, max_records())
    updateSliderInput(session, "val_top", max = max_recs, value = min(input$val_top, max_recs))
  })

  
  output$plot <- renderPlot({
    # Filter data for the selected years
    data_plot <- data %>% filter(year %in% input$Years)
    
    # Calculate top N records from the combined dataset
    top_n_combined <- data_plot %>%
      mutate(name = fct_reorder(unique_org_year, records_lost_m)) %>%
      mutate(Rank = rank(-records_lost_m, ties.method = "average")) %>%
      arrange(Rank) %>%
      group_by(year) %>%
      slice_head(n = input$val_top) %>%
      ungroup() %>%
      arrange(-records_lost_m) %>%
      slice_head(n = input$val_top)
    
    ggplot(top_n_combined, aes(x = name, y = records_lost_m, color = as.factor(year))) +
      geom_segment(aes(
        x = name,
        xend = name,
        y = 0,
        yend = records_lost_m
      )) +
      geom_point(size = 4, alpha = 0.6) +
      scale_y_log10(labels = label_number()) +
      labs(title = "Data Breach Overview", x = "Organisations", y = "Records Lost (in millions)", color = "Year") +
      coord_flip() +
      theme_gray()
  }, res = 96)
  
  output$info <- renderText({
    # Filter data for the selected years
    data_plot <- data %>% filter(year %in% input$Years)
    
    # Calculate top N records from the combined dataset
    top_n_combined <- data_plot %>%
      mutate(name = fct_reorder(unique_org_year, records_lost_m)) %>%
      mutate(Rank = rank(-records_lost_m, ties.method = "average")) %>%
      arrange(Rank) %>%
      group_by(year) %>%
      slice_head(n = input$val_top) %>%
      ungroup() %>%
      arrange(-records_lost_m) %>%
      slice_head(n = input$val_top)
    
    # Sort selected years in ascending order
    sorted_years <- sort(input$Years)
    
    top_text <- top_n_combined %>%
      mutate(Info = paste(
        Rank,
        ": ",
        name,
        " - Records Lost (in Millions): ",
        records_lost_m,
        " - Year: ",
        year
      )) %>%
      pull(Info) %>%
      paste(collapse = "\n")
    
    paste0(
      "Years: ",
      paste(sorted_years, collapse = ", "),
      "\n",
      "Total Records Lost (in Millions): ",
      sum(top_n_combined$records_lost_m),
      "\n\n",
      "Top Rankings:\n",
      top_text
    )
  })
}

# Run the application
runApp(list(ui = ui, server = server), launch.browser = TRUE)

```
